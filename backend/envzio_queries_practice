repo is the highest level container
branch is the means of working on different stuff

git terms:  {
add
commit
push
checkout
log
fetch - safe command, wont create merge conflict. takes branch on remote repo and puts it into local repo
pull
merge - takes stuff in project and tries to create synchronous product
diff - used to compare the commits made in remote repo or local repo
branch
clone
remote -
}






///////////////////////////////////////////////////////////////////////////

const getAllCommunities = (req, res, next) => {
  db.any('SELECT * FROM communities')
    .then(communities => {
    res.status(200).json({
      communities: communities,
      message: 'All Communities'
    })
    })
    .catch(err => {
      return next(err)
    })
}


const addCommunity = (req, res, next) => {
  db.none('INSERT INTO community (name) VALUES(${name})', {
    name: req.body.name
  })
    .then(()) => {
      res.status(200).json({
        message: 'You have added a community'
      })
    })
    .catch(err => {
      return next(err)
    })
}

const getAllActivityForACommunity = (req, res, next) => {
  const communityId = parseInt(req.params.id)
  db.any('SELECT * FROM community JOIN users ON users.community_id = community.id JOIN subscriptions ON subscriptions.user_id = users.community_id JOIN submissions ON submissions.subscriptions_id = WHERE id=$1', communityId)
    .then(activity => {
      res.status(200).json({
        activity: activity
      })
    })
    .catch(err => {
      return next(err)
    })
}


//////////////////////////////////////////////////////////////////////////

const getAllSubscriptions = (req, res, next) => {
  db.any('SELECT * FROM subscriptions')
    .then(subscriptions => {
      res.status(200).json({
        subscriptions: subscriptions,
        message: 'All Subscriptions'
      })
    })
    .catch(err => {
      return next(err)
    })
}

const getSubscriptionsForAGoal = (req, res, next) => {
  const goalId = parseInt(req.params.id)
  db.any('SELECT * FROM subscriptions JOIN goals ON goals.community_id = community.id WHERE id=$1, goalId')
    .then(subscripGoals => {
      res.status(200).json({
        subscripGoals: subscripGoals,
        message: 'Subscriptions for a goal'
      })
    })
    .catch(err => {
      return next(err)
    })
}

const getSubscriptionsForAUser = (req, res, next) => {
  const userId = parseInt(req.params.id)
  db.any('SELECT * FROM subscriptions JOIN users ON user.id = subscriptions.user_id WHERE id=$1, userId')
    .then(subscripUser => {
      res.status(200).json({
        subscripUser: subscripUser,
        message: 'Subscriptions for a user'
      })
    })
    .catch(err => {
      return next(err)
    })
}

const addSubcription = (req, res, next) => {
  db.none('INSERT INTO subscriptions(goal_id, user_id) VALUES(${goal_id}, ${user_id})', {
    goal_id: req.body.goal_id,
    user_id: req.body.user_id
  })
    .then(newSubscript => {
      res.status(200).json({
        message: 'You have subscribed to a goal!'
      })
    })
    .catch(err => {
      return next(err)
    })
}

const deleteSubscription = (req, res, next) => {
  const subscriptionId = parseInt(req.params.id)
  db.none('DELETE subscriptions WHERE id=$1', subscriptionId)
    .then(() => {
      res.status(200).json({
        message: 'You have unsubscribed from a goal'
      })
    })
    .catch(err => {
      return next(err)
    })
}

///////////////////////////////////////////////////////////////////////////////


const { db } = require('./index');


const getAllCommunities = (req, res, next) => {
  db.any('SELECT * FROM communities')
    .then(communities => {
    res.status(200).json({
      communities: communities,
      message: 'All Communities'
    })
    })
    .catch(err => {
      return next(err)
    })
}


const addCommunity = (req, res, next) => {
  db.none('INSERT INTO community (name) VALUES(${name})', {
    name: req.body.name
  })
    .then(()) => {
      res.status(200).json({
        message: 'You have added a community'
      })
    })
    .catch(err => {
      return next(err)
    })
}

module.exports = { getAllCommunities, addCommunity }

--------------------------------------------------------------------


const express = require('express');
const router = express.Router();
const { getAllCommunities, addCommunity  } = require('.../db/queries/subscriptionQueries.js')

router.get('/', getAllCommunities);
router.post('/new', addCommunity);

module.exports = router
